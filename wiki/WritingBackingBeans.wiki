#summary Detailed look on features of Backing Beans in Movico

= What's a Backing Bean? =

A Backing Bean in Movico is a PHP class that extends {{{RequestBean}}}, {{{SessionBean}}} or {{{ApplicationBean}}}. It contains properties that map to UI components in the views you create. It contains action methods that map to user events and that execute business logic.

== Example ==

Suppose your view contains a simple input field. When a user enters a value and submits, we want this value to be available on the Backing Bean. Similarly, when we assign a value to the field on the Backing Bean, we want the input field to show that value to the user.

For this to happen we need a field on the Backing Bean and a public getter and setter to access this field from the outside. The Movico Controller will get and set the right values for us, we only need to supply the accessor methods. Our bean now looks like this:

{{{
<?
class UserBean extends RequestBean {

    private $name;

    public function getName() {
        return $this->name;
    }

    public function setName($name) {
        $this->name = $name;
    }

}
?>
}}}

Our view looks like this:
{{{
<view>
    <form>
        <inputText value="#{UserBean.name}"/>
    </form>
</view>
}}}

In this case, the {{{inputText}}} component binds to the {{{name}}} field on the {{{UserBean}}}.

== Application Flow ==

Let's see what happens when we access the view, enter a value into the input field and submit the form:

=== 1. User navigates to index page ===

The application will search for the default view (index.xml) of the application. It parses the components of the view into Movico component objects. If a component references a bean, the bean is searched (or initialized if it does not yet exist) by the BeanLocator. The value of the field that is referenced by the component is retrieved from the bean. The components then render themselves.

=== 2. User enters value and submits form ===

The application notices that there was a submission. It retrieves the bean the action was called upon and invokes the right action method. Before doing that however, the application sets the bean's values that were entered by the user in the form components so these values can be used inside the action method.

Inside the action method the necessary business logic is done. After this, the return value of the action method is used to retrieve the next view. Then step 1 executes again: view is parsed, bean values are retrieved and components are rendered.

= Bean scopes =

A Backing Bean can be request scoped, session scoped or application scoped.
 * A *RequestBean* survives only one request. When the user refreshes the page, all data that was stored in request beans is lost.
 * A *SessionBean* survives a whole user session. The session ends when the user closes his browser. Typically, a session scoped bean holds login information.
 * A *ApplicationBean* is a bean containing information that is shared across all users that access the application.

== Example: difference between request scope and session scope ==

Suppose we navigate to the index page again after we submitted the form inside the previous example. You will notice that the bean is reinitialized and the form element is empty again.

Now let {{{UserBean}}} extend {{{SessionBean}}} instead of {{{RequestBean}}}. Submit the form and navigate to the index page. The submitted field is still visible in the input field element. This is because the bean is now saved in session scope. It will only be reset when you close your browser.

*Remark:* If you don't know which scope to use, use request scope as this will be sufficient for most cases.