#summary Detailed look on features of Backing Beans in Movico

= What's a Backing Bean? =

A Backing Bean in Movico is a PHP class that extends the {{{BackingBean}}} abstract class. It contains properties that can map to view components. It contains action methods that map to user events on the view (f.e. clicking a button) and that execute business logic in the case such action is performed.

A Backing Bean always has a scope. There are three possible scopes: request, session and application. A Backing Bean uses a scope by extending {{{RequestBean}}}, {{{SessionBean}}} or {{{ApplicationBean}}}.

To get an understanding of how scopes work, please take a look at the following examples:
 * [MvcExample HelloBean], an example of a {{{RequestBean}}}
 * [#LoginBean], an example of a {{{SessionBean}}}
 * [#ChatBean], an example of an {{{ApplicationBean}}}

= Examples =

== LoginBean ==

A request scoped bean cannot hold information across different requests. Unlike session scoped beans, that survive as long as the user session. A user session in PHP lasts until a timeout is reached or if the user closes his browser.

A typical use for a session scoped bean is a bean that holds user information at login. At user logon, the login credentials the user enters are validated. If this succeeds, a reference to the user object is stored inside a SessionBean. This way, each page the user visits can use information from the stored information in the SessionBean. When the user signs out, the user object is removed from the bean.

Let's see how this works in practice. We will make three views, a login page, a logged-in page and a profile page. The login page contains input fields for a username and password. We will skip the validation and assume that the user enters the right credentials. When logged in, the user arrived to the logged-in page. From here he can navigate to his profile page where he can see his information.

=== Creating the views ===

View {{{login.xml}}} contains the input fields and a button to sign in. When signed in, the user is redirected to the {{{logged-in.xml}}} view.
{{{
<view>
    <form>
        <panelGrid columns="1">
            <inputText value="#{LoginBean.username}"/>
            <inputSecret value="#{LoginBean.password}"/>
            <commandButton action="#{LoginBean.login}" value="Login"/>
        </panelGrid>
    </form>
</view>
}}}

View {{{logged-in.xml}}} only contains a button that brings the user to his profile page.
{{{
<view>
    <form>
        <commandButton action="#{LoginBean.toProfile}" value="Go to my profile"/>
    </form>
</view>
}}}

The {{{profile.xml}}} view just shows the name of the user that was logged in:
{{{
<view>
    <outputText value="Welcome, #{LoginBean.username}"/>
</view>
}}}

=== Creating the LoginBean ===

First of all, our LoginBean should extend SessionBean. Inside the bean, the username and password are defined together with their (public) getter and setter. The {{{login}}} action method just navigates to the logged-in page (the property bindings on the login view will make sure the properties are filled with the values the user entered) if username and password are the same (great security, I know). The {{{toProfile}}} action method will just take the user to the profile view.
{{{
class LoginBean extends SessionBean {

    private $username;
    private $password;

    // getters and setters...

    public function login() {
        if($username == $password) {
            return "logged-in";
        }
        $this->username = "";
        $this->password = "";
        return null;
    }

    public function toProfile() {
        return "profile";
    }

}
}}}

=== Testing the flow ===

When the user enters his credentials and the login succeeds, the user will go to the logged-in page. When the user now navigates on to the profile page, the session bean will still have "remembered" the user's name because the bean is in session scope.

You can change the bean to a request scoped bean by extending from RequestBean instead of SessionBean. In this case, once the user has accessed the profile page, his information will be lost.